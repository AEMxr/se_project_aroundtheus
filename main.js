!function(){"use strict";class t{constructor(t){let{nameSelector:e,jobSelector:s,avatarSelector:a,stateManager:i}=t;this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(a),this._stateManager=i}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(t){let{name:e,job:s,avatar:a}=t;e&&(this._nameElement.textContent=e),s&&(this._jobElement.textContent=s),a&&(this._avatarElement.src=a)}}class e{constructor(t){this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(t){"Escape"!==t.key&&"Esc"!==t.key||this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(t=>{(t.target.classList.contains("modal_opened")||t.target.classList.contains("modal__close"))&&this.close()}))}}class s extends e{constructor(t,e,s){super(t),this._handleFormSubmit=e,this._form=this._popupElement.querySelector(".form"),this._inputList=Array.from(this._form.querySelectorAll(".form__input")),this._submitButton=this._form.querySelector(".modal__submit"),this._validator=s}close(){super.close(),this._form.reset(),this._validator.resetValidation()}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.id]}))}_getInputValues(){const t={};return this._inputList.forEach((e=>{t[e.id]=e.value})),t}getForm(){return this._form}getSubmitButton(){return this._submitButton}renderLoading(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=t?e:"Save"}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}class a extends e{constructor(t){super(t),this._previewImage=document.getElementById("previewImage"),this._popupCaption=document.getElementById("imageViewTitle")}open(t){let{name:e,link:s}=t;this._previewImage.src=s,this._previewImage.alt=e,this._popupCaption.textContent=e,super.open()}}class i extends e{constructor(t){super(t),this._form=this._popupElement.querySelector(".form"),this._handleFormSubmit=()=>{},this._handleFormSubmit=this._handleFormSubmit.bind(this)}setSubmitAction(t){this._handleFormSubmit=t}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit()}))}}class r{constructor(t,e,r,n,o){this._api=t,this._profile=e,this._formValidators=r,this._stateManager=n,this._sectionManager=o,this._handleDeleteClick=t=>{this.openPopup("delete");const e=this._popups.delete;e.setSubmitAction((()=>{this._api.deleteCard(t.getId()).then((()=>{t.deleteCard(),e.close()})).catch(console.error)}))},this._handleLikeClick=(t,e)=>this._api.toggleLike(t,e),this._handleImageClick=t=>{this._stateManager.setState({currentModal:"preview"}),this._popups.preview.open(t)},this._popupConfig={profileForm:{selector:"#profileModal",action:"patchUserInformation",formatData:t=>({name:t.name,about:t.description})},avatarEdit:{selector:"#avatarModal",action:"patchAvatar",formatData:t=>({avatar:t.avatar})},imageForm:{selector:"#imageModal",action:"postNewCard",formatData:t=>({name:t.title,link:t.link})}},this._popups={...Object.entries(this._popupConfig).reduce(((t,e)=>{let[a,i]=e;return{...t,[a]:new s(i.selector,(t=>this._handleSubmit(i.action,i.formatData(t))),this._formValidators[a])}}),{}),preview:new a("#previewModal"),delete:new i("#deletConfirmationModal")}}_handleSubmit(t,e){this._stateManager.setState({isLoading:!0,loadingAction:t});const s=this._popups["patchAvatar"===t?"avatarEdit":"postNewCard"===t?"imageForm":"profileForm"],a=s.getSubmitButton();return a.textContent="Saving...",this._api[t](e).then((a=>{if("patchUserInformation"===t)this._stateManager.setState({user:{...this._stateManager.getState().user,name:e.name,job:e.about}});else if("patchAvatar"===t)this._stateManager.setState({user:{...this._stateManager.getState().user,avatar:e.avatar}});else if("postNewCard"===t){const t=this._stateManager.getState().cards,e={name:a.name,link:a.link,_id:a._id,isLiked:!1,owner:a.owner};this._stateManager.setState({cards:[e,...t]}),this._sectionManager.addCard(e)}this._stateManager.setState({currentModal:null,isLoading:!1,loadingAction:null}),s.close()})).catch((t=>{this._stateManager.setState({errors:[...this._stateManager.getState().errors,t],isLoading:!1,loadingAction:null})})).finally((()=>{a.textContent="Save"}))}openPopup(t){if("profileForm"===t){const e=this._stateManager.getState().user;this._popups[t].setInputValues({name:e.name,description:e.job})}this._stateManager.setState({currentModal:t}),this._popups[t].open()}initializePopups(){Object.values(this._popups).forEach((t=>t.setEventListeners()))}}class n{constructor(t,e,s){this._formElement=e,this._stateManager=s,this._submitButton=this._formElement.querySelector(t.submitButtonSelector),this._inputElements=Array.from(this._formElement.querySelectorAll(t.inputSelector)),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formName=this._formElement.getAttribute("name")}_showInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);e&&(t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass),this._updateFormState())}_hideInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);e&&(t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass),this._updateFormState())}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_hasInvalidInput(){return this._inputElements.some((t=>!t.validity.valid))}_updateFormState(){const t=!this._hasInvalidInput();this._stateManager.setState({forms:{...this._stateManager.getState().forms,[this._formName]:{isValid:t,isDirty:!0}}})}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton(),this._updateFormState()}resetValidation(){this._toggleButtonState(),this._inputElements.forEach((t=>{this._hideInputError(t)}))}_setEventListeners(){this._submitButton&&this._inputElements.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}disableButton(){this._disableButton()}}class o{static _toastConfig={duration:5e3,className:"error-toast",iconText:"⚠️"};static _errorMessages={"User Information Request":"Unable to load profile. Please try again.","Initial Cards Request":"Unable to load images. Please refresh the page.","Card Like Update":"Unable to update like status. Please try again.","Card Delete":"Unable to delete card. Please try again.","Profile Update":"Unable to save profile changes. Please try again.",default:"An error occurred. Please try again."};static setStateManager(t){this._stateManager=t}static handleError(t,e){console.error(`Error in ${e}:`,t),this._updateErrorState(t,e),this._showErrorToast(e)}static _updateErrorState(t,e){this._stateManager.setState({errors:[...this._stateManager.getState().errors,{context:e,message:this._getErrorMessage(e),timestamp:Date.now()}]})}static _createToastElement(t){const e=document.createElement("div");e.className=this._toastConfig.className;const s=document.createElement("span");s.className=`${this._toastConfig.className}__icon`,s.textContent=this._toastConfig.iconText;const a=document.createElement("span");a.className=`${this._toastConfig.className}__message`,a.textContent=t;const i=document.createElement("button");return i.className=`${this._toastConfig.className}__close`,i.textContent="×",i.onclick=()=>e.remove(),e.append(s,a,i),e}static _showErrorToast(t){document.querySelector(`.${this._toastConfig.className}`)?.remove();const e=this._createToastElement(this._getErrorMessage(t));document.body.appendChild(e),setTimeout((()=>e.remove()),this._toastConfig.duration)}static _getErrorMessage(t){return this._errorMessages[t]||this._errorMessages.default}static async tryCatch(t,e){try{return await t()}catch(t){throw this.handleError(t,e),t}}}class l{constructor(t){let{baseUrl:e,headers:s}=t;this._baseUrl=e,this._headers=s}_request(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return o.tryCatch((async()=>{const s={headers:this._headers,...e},a=`${this._baseUrl}${t}`,i=await fetch(a,s);return this._handleServerResponse(i)}),e.errorContext||"API Request")}_getEndpoint(){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";const s=[arguments.length>0&&void 0!==arguments[0]?arguments[0]:"cards"];return t&&s.push(t),e&&s.push(e),`/${s.join("/")}`}_getUserEndpoint(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this._getEndpoint("users/me","",t)}async _handleServerResponse(t){if(t.ok)return t.json();throw new Error(`Error: ${t.status}`)}getUserInformation(){return this._request(this._getUserEndpoint(),{errorContext:"User Information Request"})}patchUserInformation(t){return this._request(this._getUserEndpoint(),{method:"PATCH",body:JSON.stringify({name:t.name,about:t.about}),errorContext:"Profile Update"})}patchAvatar(t){return this._request(this._getUserEndpoint("avatar"),{method:"PATCH",body:JSON.stringify({avatar:t.avatar}),errorContext:"Profile Update"})}getInitialCards(){return this._request(this._getEndpoint(),{errorContext:"Initial Cards Request"})}postNewCard(t){return this._request(this._getEndpoint(),{method:"POST",body:JSON.stringify({name:t.name,link:t.link}),errorContext:"Card Creation"})}deleteCard(t){return this._request(this._getEndpoint("cards",t),{method:"DELETE",errorContext:"Card Delete"})}toggleLike(t,e){return this._request(this._getEndpoint("cards",t,"likes"),{method:e?"PUT":"DELETE",errorContext:"Card Like Update"})}}class d{constructor(t,e,s,a,i,r,n){let{name:o,link:l,_id:d,isLiked:h,owner:c}=t;console.log("Card being constructed with isLiked:",h),this._name=o,this._link=l,this._id=d,this._userId=r,this._cardSelector=e,this._handleImageClick=s,this._handleDeleteClick=a,this._handleLikeClick=i,this._isLiked=h,this._owner=c,this.stateManager=n,this._imageLoaded=!1,this._observer=null}getId(){return this._id}_setEventListeners(){this._cardHeart.addEventListener("click",(()=>{this.handleLikeIcon()})),this._cardDelete.addEventListener("click",(()=>{this._handleDeleteButton()})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleDeleteButton(){this._handleDeleteClick(this)}deleteCard(){this._cardElement.remove(),this._cardElement=null,this.stateManager.setState({cards:this.stateManager.getState().cards.filter((t=>t._id!==this._id))})}_setLikeButtonState(){this._isLiked?this._cardHeart.classList.add("card__heart_active"):this._cardHeart.classList.remove("card__heart_active")}handleLikeIcon(){const t=!this._isLiked,e=t?"card__heart_clicked-active":"card__heart_clicked-inactive";this._cardHeart.classList.add(e),this._handleLikeClick(this._id,t).then((()=>{this._isLiked=t,this._setLikeButtonState();const e=this.stateManager.getState().cards.map((e=>e._id===this._id?{...e,isLiked:t}:e));this.stateManager.setState({cards:e})})).finally((()=>{setTimeout((()=>{this._cardHeart.classList.remove(e)}),800)}))}getCardElement(){const t=document.querySelector(this._cardSelector);if(!t)throw new Error(`Template with selector ${this._cardSelector} not found in DOM`);this._cardElement=t.content.cloneNode(!0).querySelector(".card");const e=document.querySelectorAll(".card");return this._cardElement.style.setProperty("--card-index",e.length),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardLabel=this._cardElement.querySelector(".card__label"),this._cardHeart=this._cardElement.querySelector(".card__heart"),this._cardDelete=this._cardElement.querySelector(".card__delete"),this._cardImage.loading="lazy",this._setupIntersectionObserver(),this._cardImage.alt=this._name,this._cardLabel.textContent=this._name,this._isLiked&&this._setLikeButtonState(),this._setEventListeners(),this._cardElement}_setupIntersectionObserver(){this._observer=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting&&!this._imageLoaded&&(this._cardImage.src=this._link,this._imageLoaded=!0,this._observer.unobserve(this._cardImage))}))}),{rootMargin:"50px"}),this._observer.observe(this._cardImage)}}class h{constructor(t,e,s,a,i,r,n){this._cardSelector=t,this._api=e,this._profile=s,this._cardsGrid=document.querySelector(".cards__grid"),this._handleImageClick=a,this._handleDeleteClick=i,this._handleLikeClick=r,this._stateManager=n,this._initialRenderComplete=!1}renderInitialCards(t){if(Array.isArray(t)&&!this._initialRenderComplete){this._cardsGrid.innerHTML="";for(let e=0;e<t.length;e++){const s=this._createCard(t[e]);this._cardsGrid.append(s)}setTimeout((()=>{this._cardsGrid.style.animation="fadeInDown 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards",this._initialRenderComplete=!0}),100*t.length+500)}}updateCard(t,e){const s=this._cardsGrid.querySelector(`[data-card-id="${t}"]`);if(s){const t=this._createCard(e);s.replaceWith(t)}}_addInitialCard(t){const e=this._createCard(t);this._cardsGrid.prepend(e)}addCard(t){const e=this._createCard(t);this._cardsGrid.prepend(e)}_createCard(t){return new d({name:t.name,link:t.link,_id:t._id,isLiked:t.isLiked,owner:t.owner},this._cardSelector,this._handleImageClick,this._handleDeleteClick,this._handleLikeClick,this._profile._id,this._stateManager).getCardElement()}}class c{constructor(){this.apiConfig={baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"4b5891e6-236c-4083-9664-b0567d688b97","Content-Type":"application/json"}},this.validationConfig={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},this.selectors={cardTemplate:"#card-template",profileName:".profile__name",profileJob:".profile__profession",profileAvatar:".profile__avatar",cardsGrid:".cards__grid",profileEditButton:"#profileEditButton",avatarEditButton:"#avatarEditButton",imageEditButton:"#imageEditButton",profileForm:"#profileModal",avatarForm:"#avatarModal",imageForm:"#imageModal",previewModal:"#previewModal",deleteConfirmModal:"#deletConfirmationModal"},this.buttonConfig={profileEditButton:"profileForm",avatarEditButton:"avatarEdit",imageEditButton:"imageForm"}}getApiConfig(){return this.apiConfig}getValidationConfig(){return this.validationConfig}getSelectors(){return this.selectors}getButtonConfig(){return this.buttonConfig}}class _{constructor(){this._state={user:null,cards:[],isLoading:!1,currentModal:null,errors:[]},this._subscribers=new Set}getState(){return this._state}setState(t){this._state={...this._state,...t},this._notifySubscribers()}subscribe(t){return this._subscribers.add(t),()=>this._subscribers.delete(t)}_notifySubscribers(){this._subscribers.forEach((t=>t(this._state)))}}document.forms.profileForm,document.forms.imageForm,document.getElementById("name"),document.getElementById("description"),document.getElementById("title"),document.getElementById("link");const u={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".modal__submit",inactiveButtonClass:"modal__submit_disabled",inputErrorClass:"form__input-error",errorClass:"form__input-error_visible"};class m{constructor(){this.config=new c,this.stateManager=new _,this.api=null,this.profile=null,this.popupManager=null,this.sectionManager=null,this.formValidators=null,this.initialCardsRendered=!1}initializeApi(){return new l(this.config.getApiConfig())}initializeProfile(){const e=this.config.getSelectors();return new t({nameSelector:e.profileName,jobSelector:e.profileJob,avatarSelector:e.profileAvatar,stateManager:this.stateManager})}initializeValidation(t){const e={};return Array.from(document.querySelectorAll(t.formSelector)).forEach((s=>{const a=new n(t,s,this.stateManager);e[s.getAttribute("name")]=a,a.enableValidation()})),e}initializeEventListeners(){const t=this.config.getButtonConfig();Object.entries(t).forEach((t=>{let[e,s]=t;document.getElementById(e).addEventListener("click",(()=>{console.log("Before modal:",this.stateManager.getState()),this.stateManager.setState({currentModal:s}),console.log("After modal:",this.stateManager.getState()),this.popupManager.openPopup(s)}))}))}async initialize(){o.setStateManager(this.stateManager),this.api=this.initializeApi(),this.profile=this.initializeProfile(),this.formValidators=this.initializeValidation(u),this.stateManager.subscribe((t=>{console.log("State updated:",t),t.user&&this.profile.setUserInfo(t.user),t.cards&&t.cards.length>0&&!t.isLoading&&this.sectionManager.renderInitialCards(t.cards)})),this.sectionManager=new h("#card-template",this.api,this.profile,(t=>this.popupManager._handleImageClick(t)),(t=>this.popupManager._handleDeleteClick(t)),((t,e)=>this.popupManager._handleLikeClick(t,e)),this.stateManager),this.popupManager=new r(this.api,this.profile,this.formValidators,this.stateManager,this.sectionManager),this.popupManager.initializePopups(),this.initializeEventListeners(),this.stateManager.setState({isLoading:!0});try{const[t,e]=await Promise.all([this.api.getUserInformation(),this.api.getInitialCards()]);this.stateManager.setState({user:{name:t.name,job:t.about,avatar:t.avatar},cards:e,isLoading:!1})}catch(t){console.error(t),this.stateManager.setState({isLoading:!1})}}}document.addEventListener("DOMContentLoaded",(()=>{(new m).initialize()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,